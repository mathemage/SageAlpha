r"""
Enhanced solving of easier exercises from mathematical analysis
(aimed at the difficulty level of freshmen students at the Faculty of
Mathematics and Physics of the Charles University in Prague, Czech Republic)
AUTHORS:
- Duc Trung Ha (2012): initial version

EXAMPLES:
Investigating a real-valued function::
    sage:

TODO:
- write your own examples :-)


"""
#*****************************************************************************
#      Copyright (C) 2012 Duc Trung Ha <mathemage@gmail.com>
#
# Distributed under the terms of the GNU General Public License (GPL)
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#                 http://www.gnu.org/licenses/
#*****************************************************************************

# message about source-code reload
print "sage_alpha.sage reloaded..."

# sample functions
myfunc0 = 4.2
myfunc1 = 1/4*(x - 4)*(pi + 4*x)*x
myfunc2 = (2*x^2 + 3*x + 1)/x
myfunc3 = arctan(3*x) + (6 - pi/2)
myfunc4 = 1/(x-2) + 3

def stationary_points(self):
    r"""
    This function returns list of tuples with coordinates of stationary points
        belonging to a real-valued function (of 1 variable).

    INPUT:
        
    - ``self`` - the tested real-valued function `f`
        This should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a list of tuples -- pairs "(x, f(x))" for `x` as one of
        stationary points

    EXAMPLES:

    This example illustrates default usage:

        sage: g = (y-1)*(y+3)                             
        sage: list = stationary_points(g); list                   
        [(-1, -4)]

    NOTES:

    This function first finds domain points where 1st derivative equals zero.
        Consequently, it creates a dictionary of respective pairs of
        aforementioned points and their functional values. This is done while
        checking the domain point is of type "(x : real_value)".    

    TODO:
        
    - seldom strange behavior -> check for NUMERICAL FUNCTIONAL values, i.e.

        sage: stationary_points(f)
        [{-1/6*cos(x): 1/12*cos(x)^2 + sin(-1/6*cos(x))}]

        x in variables()
    - options for restricted domains
    - unable to find some solutions even numerically, e.g.

        sage: k = 5*x^4+e^x           
        sage: find_root(k.diff(),x,2)

    ::

        sage: investigate(sin(x)+abs(cos(x)))
        Stationary points:  [(1/2*pi, 1)]
        Inflection points:  []
    - what should we do with constant functions? None or Whole `\mathbb{R}`? - `\mathbb{R}`
    - ERROR: TypeError: 'sage.symbolic.expression.Expression' object does not
        support indexing
    
        sage: solve(f.diff(), x, to_poly_solve=True)   


    AUTHORS:
    - Duc Trung Ha (2012-03-30)
    """
    # "f(x) = sth(x)" form instead of "f = sth(x)"
    if not self.is_real():
        x = self.variables()[0]
    else:
        x = var('x')
    assume(x, 'real')
    fnct(x) = self

    x_coords = solve([fnct.diff(1) == 0], x, to_poly_solve=True)
    return [(pt.right(), fnct(pt.right())) for pt in x_coords if pt.left() == x
            and pt.right() in RR]

def inflection_points(self):
    r"""
    This function returns list of tuples with coordinates of inflection points
        belonging to a real-valued function (of 1 variable).

    INPUT:
        
    - ``self`` - the tested real-valued function `f`
        This should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a list of tuples -- pairs "(x, f(x))" for `x` as one of
        inflection points

    EXAMPLES:

    This example illustrates default usage:

    NOTES:

    This function first finds domain points where 2nd derivative equals zero.
        Consequently, it creates a dictionary of respective pairs of
        aforementioned points and their functional values. This is done while
        checking the domain point is of type "(x : real_value)".    
    
    TODO:
        
    - same as in stationary_points
    - periodic solutions, e.g.

        sage: h(x) = sin(x)/cos(x)+1 
        sage: Ih = integral(h,x)    
        sage: solve(Ih.diff(),x,to_poly_solve=True)
        [x == 3/4*pi + 2*pi*z281, x == -1/4*pi + 2*pi*z283]

        .subs()
    
    - examples for docstring

    AUTHORS:
    - Duc Trung Ha (2012-03-31)
    """
    # "f(x) = sth(x)" form instead of "f = sth(x)"
    if not self.is_real():
        x = self.variables()[0]
    else:
        x = var('x')
    assume(x, 'real')
    fnct(x) = self

    x_coords = solve([fnct.diff(2) == 0], x, to_poly_solve=True)
    return [(pt.right(), fnct(pt.right())) for pt in x_coords if pt.left() == x
            and pt.right() in RR]

def asymptotes(self):
    r"""
    This function returns the function's list of asymptotes (horizontal,
    vertical and oblique).

    INPUT:
        
    - ``self`` - the input real-valued function `f`
        This should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a list -- functions of asymptotes

    EXAMPLES:

    This example illustrates default usage:

    NOTES:

    TODO:
        
    - vertical asymptotes (detect_poles="show" displays them in plot!!)
    - examples&notes for docstring
    

    AUTHORS:
    - Duc Trung Ha (2012-03-31)
    """
    # "f(x) = sth(x)" form instead of "f = sth(x)"
    if not self.is_real():
        x = self.variables()[0]
    else:
        x = var('x')
    assume(x, 'real')
    fnct(x) = self

    results = []

    # horizontal asymptote -> -oo in form of y(x) = c
    c = limit(fnct, x = -oo)
    if c.is_real():
        asy(x) = c
        results.append(asy)

    # horizontal asymptote -> oo in form of y(x) = c
    c = limit(fnct, x = oo)
    if c.is_real():
        asy(x) = c
        results.append(asy)

    # oblique asymptote -> -oo in form of y(x) = ax+b 
    a = limit(fnct/x, x = -oo)
    b = limit(fnct - a*x, x = -oo)
    if a.is_real() and b.is_real():
        asy(x) = a*x + b
        results.append(asy)

    # oblique asymptote -> oo in form of y(x) = ax+b 
    a = limit(fnct/x, x = oo)
    b = limit(fnct - a*x, x = oo)
    if a.is_real() and b.is_real():
        asy(x) = a*x + b
        results.append(asy)

    return list(set(results))

def monotonicity(self, type="iso", pure=False):
    r"""
    This function returns list of conditions on `x` for non-decreasingness or
    non-increasingness of `self`.

    INPUT:
        
    - ``self`` - the input real-valued function `f`
        This should be a function from `\mathbb{R}` to `\mathbb{R}`
    - ``pure`` - boolean (default: false) 
        If true, search for strictly monotonous parts.
    - ``type`` - string "iso" or "anti" (default: "iso") 
        If "iso", search for non-decreasing parts, else for non-increasing
        parts.

    OUTPUT:

    a list - inequalities in `x` for given type of monotonicity

    EXAMPLES:

    This example illustrates default (i.e. isotonicity) usage:

        sage: monotonicity(x^4-3*x^2+2)
        [[x >= -1/2*sqrt(2)*sqrt(3), x <= 0], [x >= 1/2*sqrt(2)*sqrt(3)]]

    ::

        sage: monotonicity(x^4-3*x^2+2, pure=True)
        [[x > -1/2*sqrt(2)*sqrt(3), x < 0], [x > 1/2*sqrt(2)*sqrt(3)]]

    This example illustrates usage of antitonicity:

        sage: monotonicity(x+1/x, type="anti")
        [[x >= -1, x <= 1]]

    ::

        sage: monotonicity(x+1/x, type="anti", pure=True)
        [[x > -1, x < 0], [x > 0, x < 1]]

    This example displays behavior for incorrect input:

        sage: monotonicity(x+1/x, type="Ant", pure=True) 
        Invalid type of monotonicity!
        []

    TODO:

    - works only on rational inequalities (try e.g. sin(x), e^x etc.) ->
      solution via Taylor series??
      test thru stats
    - strange behavior of the example above (for non-pure antitonic version)

    velikost grafu


    AUTHORS:
    - Duc Trung Ha (2012-04-02)
    """
    if type == "iso":
        if pure:
            return solve_ineq(self.diff(1) > 0)
        else:
            return solve_ineq(self.diff(1) >= 0)
    elif type == "anti":
        if pure:
            return solve_ineq(self.diff(1) < 0)
        else:
            return solve_ineq(self.diff(1) <= 0)
    else:
        print "Invalid type of monotonicity!"
        return []

def curvature(self, type="convex", pure=False):
    r"""
    This function returns list of conditions on `x` for convexity or concavity
        of `self`.

    INPUT:
        
    - ``self`` - the input real-valued function `f`
        This should be a function from `\mathbb{R}` to `\mathbb{R}`
    - ``pure`` - boolean (default: false) 
        If true, search for strictly convex/concave parts.
    - ``type`` - string "convex" or "concave" (default: "convex") 
        If "convex", search for convex parts, else for concave parts.

    OUTPUT:

    a list - inequalities in `x` for given type of curvature

    EXAMPLES:

    This example illustrates default (i.e. convexity) usage:

        sage: curvature(x*(x-1)*(x+2))  
        [[x >= (-1/3)]]

    ::

        sage: curvature(x*(x-1)*(x+2), pure=True)
        [[x > (-1/3)]]

    This example illustrates usage of concavity:

        sage: curvature(x*(x-1)*(x+2), type="concave")
        [[x <= (-1/3)]]

    ::

        sage: curvature(x*(x-1)*(x+2), type="concave", pure=True)
        [[x < (-1/3)]]

    This example displays behavior for incorrect input:

        sage: curvature(x*(x-1)*(x+2), type="cave", pure=True)
        Invalid type of curvature!
        []

    TODO:

    - works only on rational inequalities (try e.g. sin(x), e^x etc.) ->
      solution via Taylor series??


    AUTHORS:
    - Duc Trung Ha (2012-04-02)
    """
    if type == "convex":
        if pure:
            return solve_ineq(self.diff(2) > 0)
        else:
            return solve_ineq(self.diff(2) >= 0)
    elif type == "concave":
        if pure:
            return solve_ineq(self.diff(2) < 0)
        else:
            return solve_ineq(self.diff(2) <= 0)
    else:
        print "Invalid type of curvature!"
        return []

def investigate(self, left=-2*pi, right=2*pi, down=-15, up=15):
    r"""
    This function displays a variety of information on given real-valued
        function, e.g. stationary/inflection points, extremes, asymptotes, its
        plot etc.

    INPUT:
        
    - ``self`` - the input real-valued function `f`
        This should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a view - typeset document with all the gathered information

    EXAMPLES:

    This example illustrates default usage:

    TODO:
    - plot in .dvi - periodicity (e.g. in goniometric functions)
    - plots of 1st & 2nd derivatives??
    - options for colors
    - examples for docstring
    - skalovani grafu


    AUTHORS:
    - Duc Trung Ha (2012-03-31)
    """
    ###########################################################################
    # "F(X) = STH(X)" FORM INSTEAD OF "F = STH(X)"
    if not self.is_real():
        x = self.variables()[0]
    else:
        x = var('x')
    assume(x, 'real')
    fnct(x) = self
    ###########################################################################

    print "Function", fnct

    ###########################################################################
    # GENERAL FEATURES
    if fnct(x) == fnct(-x): print "- even function."
    if -fnct(x) == fnct(-x): print "- odd function."
    if self.is_real(): print "- constant function."
    ###########################################################################

    print

    ###########################################################################
    # FEATURES OF 1ST DERIVATIVE
    stats = stationary_points(fnct)
    print "- stationary points: ", stats
    stat_pts = point(stats, rgbcolor='orange', pointsize=40)
    pic = stat_pts

    #if not self.is_real():
    #    print "- non-decreasing for: ", monotonicity(fnct)
    #    print "- increasing for: ", monotonicity(fnct, pure=True)
    #    print "- non-increasing for: ", monotonicity(fnct, type="anti")
    #    print "- decreasing for: ", monotonicity(fnct, type="anti", pure=True)
    ###########################################################################

    print

    ###########################################################################
    # FEATURES OF 2ND DERIVATIVE
    infls = inflection_points(fnct)
    print "- inflection points: ", infls
    infl_pts = point(infls, rgbcolor='green', pointsize=40)
    pic += infl_pts

    #if not self.is_real():
    #    print "- convex for: ", curvature(fnct)
    #    print "- strictly convex for: ", curvature(fnct, pure=True)
    #    print "- concave for: ", curvature(fnct, type="concave")
    #    print "- strictly concave for: ", curvature(fnct, type="concave",
    #            pure=True)
    ############################################################################

    print

    ###########################################################################
    # ASYMPTOTES
    asmpts = asymptotes(fnct)
    print "- asymptotes: ", asmpts
    for f in asmpts:
        pic += line([(left,f(left)), (right,f(right))], rgbcolor='blue',
                linestyle="--")
    ###########################################################################

    pl = plot(fnct, left, right, rgbcolor='black', detect_poles="show")
    pic += pl

    show(pic, ymin=down, ymax=up)

    return
