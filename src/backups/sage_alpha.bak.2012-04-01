r"""
Enhanced solving of easier exercises from mathematical analysis
(aimed at the difficulty level of freshmen students at the Faculty of
Mathematics and Physics of the Charles University in Prague, Czech Republic)
AUTHORS:
- Duc Trung Ha (2012): initial version

EXAMPLES:
Inspecting extremes of function::
    sage: a = Integer(3) ; b = Integer(4)
    sage: a + b == 7
    True

TODO:
- write your own examples :-)


"""
#*****************************************************************************
#      Copyright (C) 2012 Duc Trung Ha <mathemage@gmail.com>
#
# Distributed under the terms of the GNU General Public License (GPL)
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#                 http://www.gnu.org/licenses/
#*****************************************************************************

print "sage_alpha.sage reloaded..."
myfunc = 1/4*(x - 4)*(pi + 4*x)*x
myfunc2 = (2*x^2 + 3*x + 1)/x
myfunc3 = arctan(3*x) + (3 - pi/2)

def stationary_points(self):
    r"""
    This function returns dictionary of stationary points belonging to a real
    function (of 1 variable).

    INPUT:
        
    - ``self`` - the input real function `f`
        Should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a dictionary -- the dictionary of pairs "{x: f(x)}" for `x` as one of
        stationary points

    EXAMPLES:

    This example illustrates default usage:

        sage: g = (y-1)*(y+3)                             
        sage: list = stationary_points(g); list                   
        [{-1: -4}]

    NOTES:

    This function first finds domain points where 1st derivative equals zero.
        Consequently, it creates a dictionary of respective pairs of
        aforementioned points and their functional values. This is done while
        checking the domain point is of type "{x : something}". That is
        performed because of occasional idiosyncrasies such as:
    
        sage: x = var('x')                                              
        sage: solve(sin(x)/cos(x)+1,x, solution_dict=True)              
        [{sin(x): -cos(x)}]
    
    TODO:
        
    - seldom strange behavior -> check for numerical functional values, i.e.

        sage: stationary_points(f)
        [{-1/6*cos(x): 1/12*cos(x)^2 + sin(-1/6*cos(x))}]

    - options for restricted domains
    - unable to find some solutions even numerically, e.g.

        sage: k = 5*x^4+e^x           
        sage: find_root(k.diff(),x,2)

    ::

        sage: inspect(sin(x)+abs(cos(x)))
        Stationary points:  [(1/2*pi, 1)]
        Inflection points:  []
    - troubles with constant functions -> self.variables() == ()


    AUTHORS:
    - Duc Trung Ha (2012-03-30)
    """
    if self.variables() != 0:
        x = self.variables()[0]
    else:
        x = var('x')
    assume(x, 'real')
    der1(x) = self.diff(1)

    x_coords = solve(der1(x) == 0, x, solution_dict=True)
    return [{pt.values()[0] : self(pt.values()[0])} for pt in x_coords if
            pt.keys()[0] == x]

def inflection_points(self):
    r"""
    This function returns dictionary of inflection points belonging to a real
    function (of 1 variable).

    INPUT:
        
    - ``self`` - the input real function `f`
        Should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a dictionary -- the dictionary of pairs "{x: f(x)}" for `x` as one of
        inflection points

    EXAMPLES:

    This example illustrates default usage:

    NOTES:

    This function first finds domain points where 2nd derivative equals zero.
        Consequently, it creates a dictionary of respective pairs of
        aforementioned points and their functional values. This is done while
        checking the domain point is of type "{x : something}". That is
        performed because of occasional idiosyncrasies such as:
    
        sage: x = var('x')                                              
        sage: solve(sin(x)/cos(x)+1,x, solution_dict=True)              
        [{sin(x): -cos(x)}]
    
    TODO:
        
    - same as in stationary_points
    - examples for docstring
    

    AUTHORS:
    - Duc Trung Ha (2012-03-31)
    """
    assume(self.variables()[0], 'real')
    x_coords = solve(self.diff(2) == 0, self.variables()[0], solution_dict=True)
    return [{x.values()[0] : self(x.values()[0])} for x in x_coords if
            x.keys()[0] == self.variables()[0]]

def asymptotes(self):
    r"""
    This function returns the function's list of asymptotes (horizontal,
    vertical and oblique).

    INPUT:
        
    - ``self`` - the input real function `f`
        Should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a list -- functions of asymptotes

    EXAMPLES:

    This example illustrates default usage:

    NOTES:

    TODO:
        
    - examples&notes for docstring
    

    AUTHORS:
    - Duc Trung Ha (2012-03-31)
    """
    x = self.variables()[0]
    assume(x, 'real')
    results = []

    # horizontal asymptote -> -oo in form of y(x) = c
    c = limit(self, x = -oo)
    if c.is_real():
        fnct(x) = c
        results.append(fnct)

    # horizontal asymptote -> oo in form of y(x) = c
    c = limit(self, x = oo)
    if c.is_real():
        fnct(x) = c
        results.append(fnct)

    # oblique asymptote -> -oo in form of y(x) = ax+b 
    a = limit(self/x, x = -oo)
    b = limit(self - a*x, x = -oo)
    if a.is_real() and b.is_real():
        fnct(x) = a*x + b
        results.append(fnct)

    # oblique asymptote -> oo in form of y(x) = ax+b 
    a = limit(self/x, x = oo)
    b = limit(self - a*x, x = oo)
    if a.is_real() and b.is_real():
        fnct(x) = a*x + b
        results.append(fnct)

    return list(set(results))

def inspect(self, left=-2*pi, right=2*pi, down=-15, up=15):
    r"""
    This function displays a variety of information on given real function,
        e.g. stationary/inflection points, extremes, asymptotes, its plot etc.

    INPUT:
        
    - ``self`` - the input real function `f`
        Should be a function from `\mathbb{R}` to `\mathbb{R}`

    OUTPUT:

    a view - typeset document with all the gathered information

    EXAMPLES:

    This example illustrates default usage:

    TODO:

    - plot in .dvi
    - periodicity (e.g. in goniometric functions)
    - options for colors
    - examples for docstring


    AUTHORS:
    - Duc Trung Ha (2012-03-31)
    """
    var = self.variables()[0]
    print "Function", self

    if self(var) == self(-var): print "- even function."
    if -self(var) == self(-var): print "- odd function."

    stats = [(x.keys()[0],x.values()[0]) for x in stationary_points(self)]
    stat_pts = point(stats, rgbcolor='orange', pointsize=40)
    print "- stationary points: ", stats
    pic = stat_pts

    infls = [(x.keys()[0],x.values()[0]) for x in inflection_points(self)]
    infl_pts = point(infls, rgbcolor='green', pointsize=40)
    print "- inflection points: ", infls
    pic += infl_pts

    asmpts = asymptotes(self)
    print "- asymptotes: ", asmpts
    for f in asmpts:
        pic += line([(left,f(left)),(right,f(right))],rgbcolor='blue')

    pl = plot(self, left, right, rgbcolor='black', detect_poles=show)
    pic += pl

    show(pic, ymin=down, ymax=up)

    return
